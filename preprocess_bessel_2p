%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Bessel & 2P Preprocessing Pipeline %%
%%    Fluorescence Analysis Script    %%
%%   Includes Baseline Subtraction    %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Initialization
dataHz = 5.00; % Frame rate in Hz. You would adjust this depending on what the HZ of your data creation is.

% User selects TIFF file
[file, path] = uigetfile('*.tif', 'Select TIFF stack');
if isequal(file, 0)
    error('No file selected!');
end
filePath = fullfile(path, file);

%% Ask user for data type
dataType = questdlg('Is this Bessel data or 2-photon data?', ...
                    'Data Type Selection', ...
                    'Bessel', '2-photon', 'Bessel');

%% Create Output Directory
outputDir = fullfile(path, 'Analysis_Output');
figuresDir = fullfile(outputDir, 'Figures');
if ~exist(outputDir, 'dir'), mkdir(outputDir); end
if ~exist(figuresDir, 'dir'), mkdir(figuresDir); end

%% Extract Metadata from TIFF File
metadata = imfinfo(filePath);
numFrames = numel(metadata);
sizeX = metadata(1).Width;
sizeY = metadata(1).Height;

fprintf('Metadata extracted:\nFrames: %d\nWidth: %d\nHeight: %d\n', numFrames, sizeX, sizeY);

%% Load Image Stack
fprintf('Loading TIFF stack...\n');
stack = zeros(sizeY, sizeX, numFrames, class(imread(filePath, 1)));

for i = 1:numFrames
    stack(:, :, i) = imread(filePath, i);
end

% Split stacks if Bessel data %  Note: This will depend on how the data from each channel is stored in your tif file. 
if strcmp(dataType, 'Bessel')
    fprintf('Splitting into even/odd frames...\n');
    evenStack = stack(:, :, 2:2:end);
    oddStack = stack(:, :, 1:2:end);
    save(fullfile(outputDir, 'stack_split.mat'), 'evenStack', 'oddStack');
else
    fullStack = stack;
    save(fullfile(outputDir, 'full_stack.mat'), 'fullStack');
end

%% Compute Projections
projectionType = 'max'; % Options: 'max' or 'mean'

if strcmp(dataType, 'Bessel')
    if strcmp(projectionType, 'max')
        projectionEven = max(evenStack, [], 3);
        projectionOdd = max(oddStack, [], 3);
    else
        projectionEven = mean(evenStack, 3);
        projectionOdd = mean(oddStack, 3);
    end
    projectionEven = imgaussfilt(projectionEven, 1);
    projectionOdd = imgaussfilt(projectionOdd, 1);
else
    if strcmp(projectionType, 'max')
        projectionFull = max(fullStack, [], 3);
    else
        projectionFull = mean(fullStack, 3);
    end
    projectionFull = imgaussfilt(projectionFull, 1);
end

%% ROI Selection
if strcmp(dataType, 'Bessel')
    fprintf('Select ROIs for each projection...\n');
    
    % Even projection
    figure; imshow(projectionEven, []);
    title('EVEN frames: Draw ROIs then close window');
    roiEven = selectROIs();
    if ~isempty(roiEven)
        save(fullfile(outputDir, 'roi_even.mat'), 'roiEven');
    end
    
    % Odd projection
    figure; imshow(projectionOdd, []);
    title('ODD frames: Draw ROIs then close window');
    roiOdd = selectROIs();
    if ~isempty(roiOdd)
        save(fullfile(outputDir, 'roi_odd.mat'), 'roiOdd');
    end
else
    fprintf('Select 2 ROIs for analysis...\n');
    figure; imshow(projectionFull, []);
    title('Draw 2 ROIs then close window');
    roiFull = selectROIs(2); % Force exactly 2 ROIs
    save(fullfile(outputDir, 'roi_full.mat'), 'roiFull');
end

%% Extract ROI Time Series
if strcmp(dataType, 'Bessel')
    [evenData, deltaF_even] = processROIs(evenStack, roiEven);
    [oddData, deltaF_odd] = processROIs(oddStack, roiOdd);
    
    % Save results
    save(fullfile(outputDir, 'even_results.mat'), 'evenData', 'deltaF_even');
    save(fullfile(outputDir, 'odd_results.mat'), 'oddData', 'deltaF_odd');
else
    [fullData, deltaF_full] = processROIs(fullStack, roiFull);
    save(fullfile(outputDir, 'full_results.mat'), 'fullData', 'deltaF_full');
end

%% Plot Results
plotResults(deltaF_even, dataHz, figuresDir, 'Even');
plotResults(deltaF_odd, dataHz, figuresDir, 'Odd');

%% Helper Functions
function rois = selectROIs(maxROIs)
    % Interactive ROI selection
    rois = {};
    while length(rois) < maxROIs
        h = drawpolygon;
        if isempty(h), break; end
        rois{end+1} = createMask(h);
    end
end

function [roiData, deltaF] = processROIs(stack, rois)
    % Process ROI time series
    numFrames = size(stack, 3);
    numROIs = length(rois);
    
    roiData = zeros(numFrames, numROIs);
    for i = 1:numFrames
        frame = stack(:, :, i);
        for r = 1:numROIs
            roiData(i, r) = mean(frame(rois{r}), 'all');
        end
    end
    
    % Calculate ΔF/F
    baseline = mean(roiData, 1);
    deltaF = (roiData - baseline) ./ baseline;
end

function plotResults(deltaF, frameRate, saveDir, prefix)
    % Plot ΔF/F results
    numROIs = size(deltaF, 2);
    time = (1:size(deltaF,1)) / frameRate;
    
    for r = 1:numROIs
        figure('Visible', 'off');
        plot(time, deltaF(:, r), 'LineWidth', 1.5);
        xlabel('Time (s)'); ylabel('ΔF/F');
        title(sprintf('%s - ROI %d', prefix, r));
        grid on;
        saveas(gcf, fullfile(saveDir, sprintf('%s_ROI%d.png', prefix, r)));
        close;
    end
end
